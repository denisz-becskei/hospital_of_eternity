{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/Web Development Frameworks/hospital-of-eternity/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nexport class FbBaseService {\n  constructor(afs) {\n    this.afs = afs;\n  } // tslint:disable-next-line: typedef\n\n\n  get(collectionName) {\n    return this.afs.collection(collectionName, ref => {\n      let query = ref;\n      query = query.orderBy('title', 'asc');\n      return query;\n    }).valueChanges();\n  }\n  /* get(collectionName: string, limit?: any, orderBy?: any, startAt?: any, parent?: string, parentPath = 'parentId', opStr = '==') {\r\n    return this.afs.collection(collectionName,\r\n      ref => {\r\n        let query: CollectionReference | Query = ref;\r\n        if (parent) {\r\n          query = query.where(parentPath, opStr as any, parent);\r\n        }\r\n        if (limit) {\r\n          query = query.limit(limit);\r\n        }\r\n        if (orderBy?.active && orderBy?.direction) {\r\n          query = query.orderBy(orderBy.active, orderBy.direction);\r\n        } else {\r\n          query = query.orderBy('id');\r\n        }\r\n        if (startAt) {\r\n          query = query.startAt(startAt[orderBy?.active ? orderBy.active : 'id']);\r\n        }\r\n        return query;\r\n      }\r\n    ).valueChanges();\r\n  } */\n\n\n  add(collectionName, data, id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const uid = id ? id : _this.afs.createId();\n      data.id = uid;\n      yield _this.afs.collection(collectionName).doc(uid).set(data);\n      return uid;\n    })();\n  } // tslint:disable-next-line: typedef\n\n\n  weakAdd(collectionName, data) {\n    return this.afs.collection(collectionName).add(data).then(result => {\n      console.log(result);\n    }, err => {\n      console.log(err);\n    }).finally(() => {\n      console.log('finally');\n    });\n  }\n\n  getById(collectionName, id) {\n    return this.afs.collection(collectionName).doc(id).valueChanges();\n  }\n\n  update(collectionName, id, data) {\n    return this.afs.collection(collectionName).doc(id).update(data).then(result => {\n      console.log(result);\n    }, err => {\n      console.log(err);\n    }).finally(() => {\n      console.log('finally');\n    });\n  }\n\n  delete(collectionName, id) {\n    return this.afs.collection(collectionName).doc(id).delete();\n  }\n\n}\n\nFbBaseService.ɵfac = function FbBaseService_Factory(t) {\n  return new (t || FbBaseService)(i0.ɵɵinject(i1.AngularFirestore));\n};\n\nFbBaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FbBaseService,\n  factory: FbBaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Projects\\Web Development Frameworks\\hospital-of-eternity\\src\\app\\services\\fb-base.service.ts"],"names":[],"mappings":";;;AAOA,OAAM,MAAO,aAAP,CAAoB;AAExB,EAAA,WAAA,CAAoB,GAApB,EAAyC;AAArB,SAAA,GAAA,GAAA,GAAA;AAA0B,GAFtB,CAIxB;;;AACA,EAAA,GAAG,CAAC,cAAD,EAAuB;AACxB,WAAO,KAAK,GAAL,CAAS,UAAT,CAAoB,cAApB,EAAoC,GAAG,IAAG;AAC/C,UAAI,KAAK,GAAgC,GAAzC;AACA,MAAA,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,OAAd,EAAuB,KAAvB,CAAR;AACA,aAAO,KAAP;AACD,KAJM,EAIJ,YAJI,EAAP;AAKD;AAED;;;;;;;;;;;;;;;;;;;;;AAqBI;;;AAEE,EAAA,GAAG,CAAC,cAAD,EAAyB,IAAzB,EAAkC,EAAlC,EAA6C;AAAA;;AAAA;AACpD,YAAM,GAAG,GAAG,EAAE,GAAG,EAAH,GAAQ,KAAI,CAAC,GAAL,CAAS,QAAT,EAAtB;AACA,MAAA,IAAI,CAAC,EAAL,GAAU,GAAV;AACA,YAAM,KAAI,CAAC,GAAL,CAAS,UAAT,CAAoB,cAApB,EAAoC,GAApC,CAAwC,GAAxC,EAA6C,GAA7C,CAAiD,IAAjD,CAAN;AACA,aAAO,GAAP;AAJoD;AAKrD,GAzCuB,CA2CxB;;;AACA,EAAA,OAAO,CAAC,cAAD,EAAyB,IAAzB,EAAgC;AACrC,WAAO,KAAK,GAAL,CAAS,UAAT,CAAoB,cAApB,EAAoC,GAApC,CAAwC,IAAxC,EAA8C,IAA9C,CACL,MAAM,IAAG;AAAG,MAAA,OAAO,CAAC,GAAR,CAAY,MAAZ;AAAsB,KAD7B,EAC+B,GAAG,IAAG;AAAG,MAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AAAmB,KAD3D,EAC6D,OAD7D,CACqE,MAAK;AAAG,MAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AAAyB,KADtG,CAAP;AAED;;AAED,EAAA,OAAO,CAAC,cAAD,EAAyB,EAAzB,EAAmC;AACxC,WAAO,KAAK,GAAL,CAAS,UAAT,CAAoB,cAApB,EAAoC,GAApC,CAAwC,EAAxC,EAA4C,YAA5C,EAAP;AACD;;AAED,EAAA,MAAM,CAAC,cAAD,EAAyB,EAAzB,EAAqC,IAArC,EAA4C;AAChD,WAAO,KAAK,GAAL,CAAS,UAAT,CAAoB,cAApB,EAAoC,GAApC,CAAwC,EAAxC,EAA4C,MAA5C,CAAmD,IAAnD,EAAyD,IAAzD,CACL,MAAM,IAAG;AAAG,MAAA,OAAO,CAAC,GAAR,CAAY,MAAZ;AAAsB,KAD7B,EAC+B,GAAG,IAAG;AAAG,MAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AAAmB,KAD3D,EAC6D,OAD7D,CACqE,MAAK;AAAG,MAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AAAyB,KADtG,CAAP;AAED;;AAED,EAAA,MAAM,CAAC,cAAD,EAAyB,EAAzB,EAAmC;AACvC,WAAO,KAAK,GAAL,CAAS,UAAT,CAAoB,cAApB,EAAoC,GAApC,CAAwC,EAAxC,EAA4C,MAA5C,EAAP;AACD;;AA5DuB;;;mBAAb,a,EAAa,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,gBAAA,C;AAAA,C;;;SAAb,a;AAAa,EAAA,OAAA,EAAb,aAAa,CAAA,I;AAAA,EAAA,UAAA,EAFZ","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFirestore, CollectionReference, Query } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FbBaseService<T extends { id?: string }> {\n\n  constructor(private afs: AngularFirestore) { }\n\n  // tslint:disable-next-line: typedef\n  get(collectionName: string): Observable<T[]> {\n    return this.afs.collection(collectionName, ref => {\n      let query: CollectionReference | Query = ref;\n      query = query.orderBy('title', 'asc');\n      return query;\n    }).valueChanges() as Observable<T[]>;\n  }\n\n  /* get(collectionName: string, limit?: any, orderBy?: any, startAt?: any, parent?: string, parentPath = 'parentId', opStr = '==') {\n    return this.afs.collection(collectionName,\n      ref => {\n        let query: CollectionReference | Query = ref;\n        if (parent) {\n          query = query.where(parentPath, opStr as any, parent);\n        }\n        if (limit) {\n          query = query.limit(limit);\n        }\n        if (orderBy?.active && orderBy?.direction) {\n          query = query.orderBy(orderBy.active, orderBy.direction);\n        } else {\n          query = query.orderBy('id');\n        }\n        if (startAt) {\n          query = query.startAt(startAt[orderBy?.active ? orderBy.active : 'id']);\n        }\n        return query;\n      }\n    ).valueChanges();\n  } */\n\n  async add(collectionName: string, data: T, id?: string): Promise<string> {\n    const uid = id ? id : this.afs.createId();\n    data.id = uid;\n    await this.afs.collection(collectionName).doc(uid).set(data);\n    return uid;\n  }\n\n  // tslint:disable-next-line: typedef\n  weakAdd(collectionName: string, data: T) {\n    return this.afs.collection(collectionName).add(data).then(\n      result => { console.log(result); }, err => { console.log(err); }).finally(() => { console.log('finally'); });\n  }\n\n  getById(collectionName: string, id: string): Observable<any> {\n    return this.afs.collection(collectionName).doc(id).valueChanges();\n  }\n\n  update(collectionName: string, id: string, data: T): Promise<void> {\n    return this.afs.collection(collectionName).doc(id).update(data).then(\n      result => { console.log(result); }, err => { console.log(err); }).finally(() => { console.log('finally'); });\n  }\n\n  delete(collectionName: string, id: string): Promise<void> {\n    return this.afs.collection(collectionName).doc(id).delete();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}