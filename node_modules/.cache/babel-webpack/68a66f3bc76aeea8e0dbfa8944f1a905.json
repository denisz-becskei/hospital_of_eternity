{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/Web Development Frameworks/hospital-of-eternity/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/fire/firestore\";\nexport class AuthService {\n  constructor(afAuth, afs) {\n    this.afAuth = afAuth;\n    this.afs = afs;\n    this.userData = null;\n  }\n\n  logout() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.afAuth.signOut();\n      _this.userData = null;\n    })();\n  }\n\n  login(email, password) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield _this2.afAuth.signInWithEmailAndPassword(email, password);\n\n        _this2.setUserData(result.user);\n      } catch (error) {\n        window.alert(error.message);\n      }\n    })();\n  }\n\n  authenticated() {\n    return this.afAuth.authState !== null;\n  }\n\n  currentUserObservable() {\n    return this.afAuth.authState;\n  }\n\n  getCurrentUser() {\n    return this.userData;\n  }\n\n  setUserData(user) {\n    this.userData = {\n      uid: user.uid,\n      email: user.email,\n      displayName: user.displayName,\n      emailVerified: user.emailVerified\n    };\n  }\n  /* newPassword(newPassword: string) {\r\n    return this.afAuth.currentUser.then((user) => {\r\n      return user.updatePassword(newPassword);\r\n    });\r\n  } */\n\n  /*  newEmail(newEmail: string) {\r\n       return this.afAuth.currentUser.then((user) => {\r\n         return user.updateEmail(newEmail);\r\n       });\r\n     } */\n\n\n  updateCurrentUserName(name) {\n    return this.afAuth.currentUser.then(user => {\n      return user === null || user === void 0 ? void 0 : user.updateProfile({\n        displayName: name\n      });\n    });\n  }\n  /* passwordRemind(email: string): Promise<void> {\r\n      return this.afAuth.sendPasswordResetEmail(email);\r\n    } */\n\n\n  createUser(email, password, name) {\n    return this.afAuth.createUserWithEmailAndPassword(email, password).then(result => {\n      if (name) {\n        this.updateCurrentUserName(name);\n      }\n\n      return result.user;\n    });\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Projects\\Web Development Frameworks\\hospital-of-eternity\\src\\app\\services\\auth.service.ts"],"names":[],"mappings":";;;;AAOA,OAAM,MAAO,WAAP,CAAkB;AAEtB,EAAA,WAAA,CAAoB,MAApB,EAAqD,GAArD,EAA0E;AAAtD,SAAA,MAAA,GAAA,MAAA;AAAiC,SAAA,GAAA,GAAA,GAAA;AADrD,SAAA,QAAA,GAAgB,IAAhB;AAC8E;;AAExE,EAAA,MAAM,GAAA;AAAA;;AAAA;AACV,YAAM,KAAI,CAAC,MAAL,CAAY,OAAZ,EAAN;AACA,MAAA,KAAI,CAAC,QAAL,GAAgB,IAAhB;AAFU;AAGX;;AAEK,EAAA,KAAK,CAAC,KAAD,EAAgB,QAAhB,EAAgC;AAAA;;AAAA;AACzC,UAAI;AACF,cAAM,MAAM,SAAS,MAAI,CAAC,MAAL,CAAY,0BAAZ,CAAuC,KAAvC,EAA8C,QAA9C,CAArB;;AACA,QAAA,MAAI,CAAC,WAAL,CAAiB,MAAM,CAAC,IAAxB;AACD,OAHD,CAGE,OAAO,KAAP,EAAc;AACd,QAAA,MAAM,CAAC,KAAP,CAAa,KAAK,CAAC,OAAnB;AACD;AANwC;AAO1C;;AAED,EAAA,aAAa,GAAA;AACX,WAAO,KAAK,MAAL,CAAY,SAAZ,KAA0B,IAAjC;AACD;;AAED,EAAA,qBAAqB,GAAA;AACnB,WAAO,KAAK,MAAL,CAAY,SAAnB;AACD;;AAED,EAAA,cAAc,GAAA;AACZ,WAAO,KAAK,QAAZ;AACD;;AAED,EAAA,WAAW,CAAC,IAAD,EAAU;AACnB,SAAK,QAAL,GAAgB;AACd,MAAA,GAAG,EAAE,IAAI,CAAC,GADI;AAEd,MAAA,KAAK,EAAE,IAAI,CAAC,KAFE;AAGd,MAAA,WAAW,EAAE,IAAI,CAAC,WAHJ;AAId,MAAA,aAAa,EAAE,IAAI,CAAC;AAJN,KAAhB;AAMD;AAED;;;;AAII;;AAEJ;;;;AAIO;;;AAEP,EAAA,qBAAqB,CAAC,IAAD,EAAa;AAChC,WAAO,KAAK,MAAL,CAAY,WAAZ,CAAwB,IAAxB,CAA8B,IAAD,IAAS;AAC3C,aAAO,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,aAAN,CAAoB;AACzB,QAAA,WAAW,EAAE;AADY,OAApB,CAAP;AAGD,KAJM,CAAP;AAKD;AAED;;AAEM;;;AAEN,EAAA,UAAU,CAAC,KAAD,EAAgB,QAAhB,EAAkC,IAAlC,EAA+C;AACvD,WAAO,KAAK,MAAL,CACJ,8BADI,CAC2B,KAD3B,EACkC,QADlC,EAEJ,IAFI,CAEE,MAAD,IAAW;AACf,UAAI,IAAJ,EAAU;AACR,aAAK,qBAAL,CAA2B,IAA3B;AACD;;AACD,aAAO,MAAM,CAAC,IAAd;AACD,KAPI,CAAP;AAQD;;AAxEqB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,eAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,gBAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV","sourcesContent":["import { AngularFireAuth } from '@angular/fire/auth';\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  userData: any = null;\n  constructor(private afAuth: AngularFireAuth, private afs: AngularFirestore) {}\n\n  async logout(): Promise<void> {\n    await this.afAuth.signOut();\n    this.userData = null;\n  }\n\n  async login(email: string, password: string): Promise<any> {\n    try {\n      const result = await this.afAuth.signInWithEmailAndPassword(email, password);\n      this.setUserData(result.user);\n    } catch (error) {\n      window.alert(error.message);\n    }\n  }\n\n  authenticated(): boolean {\n    return this.afAuth.authState !== null;\n  }\n\n  currentUserObservable(): any {\n    return this.afAuth.authState;\n  }\n\n  getCurrentUser(): any {\n    return this.userData;\n  }\n\n  setUserData(user: any) {\n    this.userData = {\n      uid: user.uid,\n      email: user.email,\n      displayName: user.displayName,\n      emailVerified: user.emailVerified\n    }\n  }\n\n  /* newPassword(newPassword: string) {\n    return this.afAuth.currentUser.then((user) => {\n      return user.updatePassword(newPassword);\n    });\n  } */\n\n  /*  newEmail(newEmail: string) {\n       return this.afAuth.currentUser.then((user) => {\n         return user.updateEmail(newEmail);\n       });\n     } */\n\n  updateCurrentUserName(name: string) {\n    return this.afAuth.currentUser.then((user) => {\n      return user?.updateProfile({\n        displayName: name,\n      });\n    });\n  }\n\n  /* passwordRemind(email: string): Promise<void> {\n      return this.afAuth.sendPasswordResetEmail(email);\n    } */\n\n  createUser(email: string, password: string, name?: string) {\n    return this.afAuth\n      .createUserWithEmailAndPassword(email, password)\n      .then((result) => {\n        if (name) {\n          this.updateCurrentUserName(name);\n        }\n        return result.user;\n      });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}